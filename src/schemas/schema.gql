# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInput {
  """Email using login"""
  email: String!

  """password of account"""
  password: String!
}

type AuthResDto {
  access_token: String!
  user: User!
}

type Book {
  """Book id"""
  bookID: String!

  """book name"""
  book_title: String!

  """category of book"""
  category: String!

  """page number"""
  page: Float!

  """photo of book"""
  photo_id: String!

  """status of book"""
  status: BookStatus!

  """volume"""
  volume: Float!
}

type BookCategory {
  """category id"""
  categoryID: String!

  """category name"""
  name: String!

  """photo_id"""
  photo_id: String!

  """status of books above"""
  status: BookStatus!

  """total book of category"""
  total: Float!
}

enum BookStatus {
  available
  unavailable
}

type Category {
  """category name"""
  name: String!

  """category's avatar"""
  photo_id: String!
}

input CreateBookInput {
  """book name"""
  book_title: String!

  """category of book"""
  category: String!

  """page number"""
  page: Float!

  """image of category"""
  photo_id: String!

  """volume"""
  volume: Float!
}

input CreateCategoryInput {
  """category name"""
  name: String!

  """image of category"""
  photo_id: String!
}

input CreateMediaDto {
  """title of media"""
  description: String!

  """image of category"""
  media: Upload!

  """size of media using resizing"""
  size: Float!
}

input CreateUserInput {
  """Email of User"""
  email: String!

  """password of account"""
  password: String!

  """role of account"""
  role: Role = user
}

type Media {
  """description of media"""
  description: String!

  """media id"""
  mediaID: String!

  """url of media"""
  media_urls: String!
}

type Mutation {
  createBook(createBookInput: CreateBookInput!): Book!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createUser(createUserInput: CreateUserInput!): User!
  removeBook(id: Int!): Book!
  removeCategory(id: Int!): Category!
  removeUser(id: Int!): User!
  updateBook(updateBookInput: UpdateBookInput!): Book!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateUser(updateUserInput: UpdateUserInput!): User!
  upload_media(media: CreateMediaDto!): Media!
}

type Query {
  book(id: Int!): Book!
  category(id: Int!): Category!
  login(account: AuthInput!): AuthResDto!
  total_category(page: Int!, record: Int!): [BookCategory!]!
  user(id: Int!): User!
}

enum Role {
  admin
  user
}

input UpdateBookInput {
  """amount of book"""
  amount: Float!

  """book id"""
  bookID: String!

  """book name"""
  book_title: String!

  """category of book"""
  category: String!

  """image of category"""
  image: Upload!

  """page number"""
  page: Float!

  """image of category"""
  photo_id: String

  """volume"""
  volume: Float!
}

input UpdateCategoryInput {
  id: Int!

  """category name"""
  name: String

  """image of category"""
  photo_id: String
}

input UpdateUserInput {
  """Email of User"""
  email: String
  id: Int!

  """password of account"""
  password: String

  """role of account"""
  role: Role = user
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  """Email of User"""
  email: String!

  """password of account"""
  password: String!

  """role of account"""
  role: Role!
}